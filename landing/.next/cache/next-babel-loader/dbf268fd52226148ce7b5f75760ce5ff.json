{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport Scrollspy from 'react-scrollspy';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport { DrawerContext } from '../../contexts/DrawerContext';\n\nconst ScrollSpyMenu = (_ref) => {\n  let {\n    className,\n    menuItems,\n    drawerClose\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"menuItems\", \"drawerClose\"]);\n\n  const {\n    dispatch\n  } = useContext(DrawerContext); // empty array for scrollspy items\n\n  const scrollItems = []; // convert menu path to scrollspy items\n\n  menuItems.forEach(item => {\n    scrollItems.push(item.path.slice(1));\n  }); // Add all classs to an array\n\n  const addAllClasses = ['scrollspy__menu']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Close drawer when click on menu item\n\n\n  const toggleDrawer = () => {\n    dispatch({\n      type: 'TOGGLE'\n    });\n  };\n\n  return __jsx(Scrollspy, _extends({\n    items: scrollItems,\n    className: addAllClasses.join(' '),\n    drawerClose: drawerClose\n  }, props), menuItems.map((menu, index) => __jsx(\"li\", {\n    key: `menu-item-${index}`\n  }, menu.staticLink ? __jsx(\"a\", {\n    href: menu.path\n  }, menu.label) : __jsx(React.Fragment, null, drawerClose ? __jsx(AnchorLink, {\n    href: menu.path,\n    offset: menu.offset,\n    onClick: toggleDrawer\n  }, menu.label) : __jsx(AnchorLink, {\n    href: menu.path,\n    offset: menu.offset\n  }, menu.label)))));\n};\n\nScrollSpyMenu.defaultProps = {\n  componentTag: 'ul',\n  currentClassName: 'is-current'\n};\nexport default ScrollSpyMenu;","map":null,"metadata":{},"sourceType":"module"}