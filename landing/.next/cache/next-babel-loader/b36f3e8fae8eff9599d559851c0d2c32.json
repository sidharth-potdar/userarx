{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar __jsx = React.createElement;\nimport React, { Fragment } from 'react';\nimport ButtonStyle from './button.style';\nimport Loader from '../Loader';\n\nconst Button = (_ref) => {\n  let {\n    type,\n    title,\n    icon,\n    disabled,\n    iconPosition,\n    onClick,\n    loader,\n    loaderColor,\n    isMaterial,\n    isLoading,\n    className\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"type\", \"title\", \"icon\", \"disabled\", \"iconPosition\", \"onClick\", \"loader\", \"loaderColor\", \"isMaterial\", \"isLoading\", \"className\"]);\n\n  // Add all classs to an array\n  const addAllClasses = ['reusecore__button']; // isLoading prop checking\n\n  if (isLoading) {\n    addAllClasses.push('is-loading');\n  } // isMaterial prop checking\n\n\n  if (isMaterial) {\n    addAllClasses.push('is-material');\n  } // className prop checking\n\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Checking button loading state\n\n\n  const buttonIcon = isLoading !== false ? __jsx(Fragment, null, loader ? loader : __jsx(Loader, {\n    loaderColor: loaderColor || '#30C56D'\n  })) : icon && __jsx(\"span\", {\n    className: \"btn-icon\"\n  }, icon); // set icon position\n\n  const position = iconPosition || 'right';\n  return __jsx(ButtonStyle, _extends({\n    type: type,\n    className: addAllClasses.join(' '),\n    icon: icon,\n    disabled: disabled,\n    \"icon-position\": position,\n    onClick: onClick\n  }, props), position === 'left' && buttonIcon, title && __jsx(\"span\", {\n    className: \"btn-text\"\n  }, title), position === 'right' && buttonIcon);\n};\n\nButton.defaultProps = {\n  disabled: false,\n  isMaterial: false,\n  isLoading: false,\n  type: 'button'\n};\nexport default Button;","map":null,"metadata":{},"sourceType":"module"}