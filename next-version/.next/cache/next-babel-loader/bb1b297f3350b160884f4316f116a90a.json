{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/meghna/Desktop/next-version/pages/components/ScrollSpyMenu/index.js\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport Scrollspy from 'react-scrollspy';\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\nimport { DrawerContext } from '../../contexts/DrawerContext';\n\nconst ScrollSpyMenu = (_ref) => {\n  let {\n    className,\n    menuItems,\n    drawerClose\n  } = _ref,\n      props = _objectWithoutProperties(_ref, [\"className\", \"menuItems\", \"drawerClose\"]);\n\n  const {\n    dispatch\n  } = useContext(DrawerContext); // empty array for scrollspy items\n\n  const scrollItems = []; // convert menu path to scrollspy items\n\n  menuItems.forEach(item => {\n    scrollItems.push(item.path.slice(1));\n  }); // Add all classs to an array\n\n  const addAllClasses = ['scrollspy__menu']; // className prop checking\n\n  if (className) {\n    addAllClasses.push(className);\n  } // Close drawer when click on menu item\n\n\n  const toggleDrawer = () => {\n    dispatch({\n      type: 'TOGGLE'\n    });\n  };\n\n  return __jsx(Scrollspy, _extends({\n    items: scrollItems,\n    className: addAllClasses.join(' '),\n    drawerClose: drawerClose\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }), menuItems.map((menu, index) => __jsx(\"li\", {\n    key: `menu-item-${index}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, menu.staticLink ? __jsx(\"a\", {\n    href: menu.path,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, menu.label) : __jsx(React.Fragment, null, drawerClose ? __jsx(AnchorLink, {\n    href: menu.path,\n    offset: menu.offset,\n    onClick: toggleDrawer,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, menu.label) : __jsx(AnchorLink, {\n    href: menu.path,\n    offset: menu.offset,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, menu.label)))));\n};\n\nScrollSpyMenu.propTypes = {\n  /** className of the ScrollSpyMenu. */\n  className: PropTypes.string,\n\n  /** menuItems is an array of object prop which contain your menu\r\n   * data.\r\n   */\n  menuItems: PropTypes.array.isRequired,\n\n  /** Class name that apply to the navigation element paired with the content element in viewport. */\n  currentClassName: PropTypes.string,\n\n  /** Class name that apply to the navigation elements that have been scrolled past [optional]. */\n  scrolledPastClassName: PropTypes.string,\n\n  /** HTML tag for Scrollspy component if you want to use other than <ul/> [optional]. */\n  componentTag: PropTypes.string,\n\n  /** Style attribute to be passed to the generated <ul/> element [optional]. */\n  style: PropTypes.object,\n\n  /** Offset value that adjusts to determine the elements are in the viewport [optional]. */\n  offset: PropTypes.number,\n\n  /** Name of the element of scrollable container that can be used with querySelector [optional]. */\n  rootEl: PropTypes.string,\n\n  /**\r\n   * Function to be executed when the active item has been updated [optional].\r\n   */\n  onUpdate: PropTypes.func\n};\nScrollSpyMenu.defaultProps = {\n  componentTag: 'ul',\n  currentClassName: 'is-current'\n};\nexport default ScrollSpyMenu;","map":{"version":3,"sources":["/Users/meghna/Desktop/next-version/pages/components/ScrollSpyMenu/index.js"],"names":["React","useContext","PropTypes","Scrollspy","AnchorLink","DrawerContext","ScrollSpyMenu","className","menuItems","drawerClose","props","dispatch","scrollItems","forEach","item","push","path","slice","addAllClasses","toggleDrawer","type","join","map","menu","index","staticLink","label","offset","propTypes","string","array","isRequired","currentClassName","scrolledPastClassName","componentTag","style","object","number","rootEl","onUpdate","func","defaultProps"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Scrollspy from 'react-scrollspy';\r\nimport AnchorLink from 'react-anchor-link-smooth-scroll';\r\n\r\nimport { DrawerContext } from '../../contexts/DrawerContext';\r\n\r\nconst ScrollSpyMenu = ({ className, menuItems, drawerClose, ...props }) => {\r\n  const { dispatch } = useContext(DrawerContext);\r\n  // empty array for scrollspy items\r\n  const scrollItems = [];\r\n\r\n  // convert menu path to scrollspy items\r\n  menuItems.forEach(item => {\r\n    scrollItems.push(item.path.slice(1));\r\n  });\r\n\r\n  // Add all classs to an array\r\n  const addAllClasses = ['scrollspy__menu'];\r\n\r\n  // className prop checking\r\n  if (className) {\r\n    addAllClasses.push(className);\r\n  }\r\n\r\n  // Close drawer when click on menu item\r\n  const toggleDrawer = () => {\r\n    dispatch({\r\n      type: 'TOGGLE',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Scrollspy\r\n      items={scrollItems}\r\n      className={addAllClasses.join(' ')}\r\n      drawerClose={drawerClose}\r\n      {...props}\r\n    >\r\n      {menuItems.map((menu, index) => (\r\n        <li key={`menu-item-${index}`}>\r\n          {menu.staticLink ? (\r\n            <a href={menu.path}>{menu.label}</a>\r\n          ) : (\r\n            <>\r\n              {drawerClose ? (\r\n                <AnchorLink\r\n                  href={menu.path}\r\n                  offset={menu.offset}\r\n                  onClick={toggleDrawer}\r\n                >\r\n                  {menu.label}\r\n                </AnchorLink>\r\n              ) : (\r\n                <AnchorLink href={menu.path} offset={menu.offset}>\r\n                  {menu.label}\r\n                </AnchorLink>\r\n              )}\r\n            </>\r\n          )}\r\n        </li>\r\n      ))}\r\n    </Scrollspy>\r\n  );\r\n};\r\n\r\nScrollSpyMenu.propTypes = {\r\n  /** className of the ScrollSpyMenu. */\r\n  className: PropTypes.string,\r\n\r\n  /** menuItems is an array of object prop which contain your menu\r\n   * data.\r\n   */\r\n  menuItems: PropTypes.array.isRequired,\r\n\r\n  /** Class name that apply to the navigation element paired with the content element in viewport. */\r\n  currentClassName: PropTypes.string,\r\n\r\n  /** Class name that apply to the navigation elements that have been scrolled past [optional]. */\r\n  scrolledPastClassName: PropTypes.string,\r\n\r\n  /** HTML tag for Scrollspy component if you want to use other than <ul/> [optional]. */\r\n  componentTag: PropTypes.string,\r\n\r\n  /** Style attribute to be passed to the generated <ul/> element [optional]. */\r\n  style: PropTypes.object,\r\n\r\n  /** Offset value that adjusts to determine the elements are in the viewport [optional]. */\r\n  offset: PropTypes.number,\r\n\r\n  /** Name of the element of scrollable container that can be used with querySelector [optional]. */\r\n  rootEl: PropTypes.string,\r\n\r\n  /**\r\n   * Function to be executed when the active item has been updated [optional].\r\n   */\r\n  onUpdate: PropTypes.func,\r\n};\r\n\r\nScrollSpyMenu.defaultProps = {\r\n  componentTag: 'ul',\r\n  currentClassName: 'is-current',\r\n};\r\n\r\nexport default ScrollSpyMenu;\r\n"]},"metadata":{},"sourceType":"module"}