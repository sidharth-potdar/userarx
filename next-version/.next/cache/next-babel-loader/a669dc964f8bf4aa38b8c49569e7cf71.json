{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/meghna/Desktop/next-version/pages/containers/Agency/Navbar/index.js\";\nvar __jsx = React.createElement;\nimport React, { useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport { openModal, closeModal } from '@redq/reuse-modal';\nimport NavbarWrapper from '../../../components/Navbar';\nimport Drawer from '../../../components/Drawer';\nimport Button from '../../../components/Button';\nimport Logo from '../../../components/UI/Logo';\nimport HamburgMenu from '../../../components/HamburgMenu';\nimport ScrollSpyMenu from '../../../components/ScrollSpyMenu';\nimport { Container } from './navbar.style'; // import SearchPanel from '../SearchPanel';\n// import LoginModal from '../LoginModal';\n// import CopyrightSection from '../CopyrightsSection';\n\nimport LogoImage from '../../../assets/image/agency/logo.png';\nimport { DrawerContext } from '../../../contexts/DrawerContext';\nimport data from '../../../data/Agency/'; // Default close button for modal\n\nconst CloseModalButton = () => __jsx(Button, {\n  className: \"modalCloseBtn\",\n  variant: \"fab\",\n  onClick: () => closeModal(),\n  icon: __jsx(\"i\", {\n    className: \"flaticon-plus-symbol\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 20\n  },\n  __self: this\n}); // Alt close button for modal\n\n\nconst CloseModalButtonAlt = () => __jsx(Button, {\n  className: \"modalCloseBtn alt\",\n  variant: \"fab\",\n  onClick: () => closeModal(),\n  icon: __jsx(\"i\", {\n    className: \"flaticon-plus-symbol\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }),\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 30\n  },\n  __self: this\n});\n\nconst Navbar = ({\n  navbarStyle,\n  logoStyle\n}) => {\n  const {\n    state,\n    dispatch\n  } = useContext(DrawerContext); // Search modal handler\n  // const handleSearchModal = () => {\n  //   openModal({\n  //     config: {\n  //       className: 'search-modal',\n  //       disableDragging: true,\n  //       width: '100%',\n  //       height: '100%',\n  //       animationFrom: { transform: 'translateY(100px)' }, // react-spring <Spring from={}> props value\n  //       animationTo: { transform: 'translateY(0)' }, //  react-spring <Spring to={}> props value\n  //       transition: {\n  //         mass: 1,\n  //         tension: 180,\n  //         friction: 26,\n  //       },\n  //     },\n  //     component: SearchPanel,\n  //     componentProps: {},\n  //     closeComponent: CloseModalButtonAlt,\n  //     closeOnClickOutside: false,\n  //   });\n  // };\n  // Authentication modal handler\n  // const handleLoginModal = () => {\n  //   openModal({\n  //     config: {\n  //       className: 'login-modal',\n  //       disableDragging: true,\n  //       width: '100%',\n  //       height: '100%',\n  //       animationFrom: { transform: 'translateY(100px)' }, // react-spring <Spring from={}> props value\n  //       animationTo: { transform: 'translateY(0)' }, //  react-spring <Spring to={}> props value\n  //       transition: {\n  //         mass: 1,\n  //         tension: 180,\n  //         friction: 26,\n  //       },\n  //     },\n  //     component: LoginModal,\n  //     componentProps: {},\n  //     closeComponent: CloseModalButton,\n  //     closeOnClickOutside: false,\n  //   });\n  // };\n  // Toggle drawer\n\n  const toggleHandler = () => {\n    dispatch({\n      type: 'TOGGLE'\n    });\n  };\n\n  return __jsx(NavbarWrapper, _extends({}, navbarStyle, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }), __jsx(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, __jsx(Logo, {\n    href: \"#\",\n    logoSrc: LogoImage,\n    title: \"Agency\",\n    logoStyle: logoStyle,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), __jsx(Drawer, {\n    width: \"420px\",\n    placement: \"right\",\n    drawerHandler: __jsx(HamburgMenu, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }),\n    open: state.isOpen,\n    toggleHandler: toggleHandler,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, __jsx(ScrollSpyMenu, {\n    menuItems: data.menuItems,\n    drawerClose: true,\n    offset: -100,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  }))));\n}; // Navbar style props\n\n\nNavbar.propTypes = {\n  navbarStyle: PropTypes.object,\n  logoStyle: PropTypes.object\n};\nNavbar.defaultProps = {\n  // Default navbar style\n  navbarStyle: {\n    minHeight: '70px'\n  },\n  // Default logo size\n  logoStyle: {\n    width: '128px',\n    height: 'auto'\n  }\n};\nexport default Navbar;","map":{"version":3,"sources":["/Users/meghna/Desktop/next-version/pages/containers/Agency/Navbar/index.js"],"names":["React","useContext","PropTypes","openModal","closeModal","NavbarWrapper","Drawer","Button","Logo","HamburgMenu","ScrollSpyMenu","Container","LogoImage","DrawerContext","data","CloseModalButton","CloseModalButtonAlt","Navbar","navbarStyle","logoStyle","state","dispatch","toggleHandler","type","isOpen","menuItems","propTypes","object","defaultProps","minHeight","width","height"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { openModal, closeModal } from '@redq/reuse-modal';\r\nimport NavbarWrapper from '../../../components/Navbar';\r\nimport Drawer from '../../../components/Drawer';\r\nimport Button from '../../../components/Button';\r\nimport Logo from '../../../components/UI/Logo';\r\nimport HamburgMenu from '../../../components/HamburgMenu';\r\nimport ScrollSpyMenu from '../../../components/ScrollSpyMenu';\r\nimport { Container } from './navbar.style';\r\n// import SearchPanel from '../SearchPanel';\r\n// import LoginModal from '../LoginModal';\r\n// import CopyrightSection from '../CopyrightsSection';\r\nimport LogoImage from '../../../assets/image/agency/logo.png';\r\nimport { DrawerContext } from '../../../contexts/DrawerContext';\r\nimport data from '../../../data/Agency/';\r\n\r\n// Default close button for modal\r\nconst CloseModalButton = () => (\r\n  <Button\r\n    className=\"modalCloseBtn\"\r\n    variant=\"fab\"\r\n    onClick={() => closeModal()}\r\n    icon={<i className=\"flaticon-plus-symbol\" />}\r\n  />\r\n);\r\n\r\n// Alt close button for modal\r\nconst CloseModalButtonAlt = () => (\r\n  <Button\r\n    className=\"modalCloseBtn alt\"\r\n    variant=\"fab\"\r\n    onClick={() => closeModal()}\r\n    icon={<i className=\"flaticon-plus-symbol\" />}\r\n  />\r\n);\r\n\r\nconst Navbar = ({ navbarStyle, logoStyle }) => {\r\n  const { state, dispatch } = useContext(DrawerContext);\r\n\r\n  // Search modal handler\r\n  // const handleSearchModal = () => {\r\n  //   openModal({\r\n  //     config: {\r\n  //       className: 'search-modal',\r\n  //       disableDragging: true,\r\n  //       width: '100%',\r\n  //       height: '100%',\r\n  //       animationFrom: { transform: 'translateY(100px)' }, // react-spring <Spring from={}> props value\r\n  //       animationTo: { transform: 'translateY(0)' }, //  react-spring <Spring to={}> props value\r\n  //       transition: {\r\n  //         mass: 1,\r\n  //         tension: 180,\r\n  //         friction: 26,\r\n  //       },\r\n  //     },\r\n  //     component: SearchPanel,\r\n  //     componentProps: {},\r\n  //     closeComponent: CloseModalButtonAlt,\r\n  //     closeOnClickOutside: false,\r\n  //   });\r\n  // };\r\n\r\n  // Authentication modal handler\r\n  // const handleLoginModal = () => {\r\n  //   openModal({\r\n  //     config: {\r\n  //       className: 'login-modal',\r\n  //       disableDragging: true,\r\n  //       width: '100%',\r\n  //       height: '100%',\r\n  //       animationFrom: { transform: 'translateY(100px)' }, // react-spring <Spring from={}> props value\r\n  //       animationTo: { transform: 'translateY(0)' }, //  react-spring <Spring to={}> props value\r\n  //       transition: {\r\n  //         mass: 1,\r\n  //         tension: 180,\r\n  //         friction: 26,\r\n  //       },\r\n  //     },\r\n  //     component: LoginModal,\r\n  //     componentProps: {},\r\n  //     closeComponent: CloseModalButton,\r\n  //     closeOnClickOutside: false,\r\n  //   });\r\n  // };\r\n\r\n  // Toggle drawer\r\n  const toggleHandler = () => {\r\n    dispatch({\r\n      type: 'TOGGLE',\r\n    });\r\n  };\r\n\r\n  return (\r\n    <NavbarWrapper {...navbarStyle}>\r\n      <Container>\r\n        <Logo\r\n          href=\"#\"\r\n          logoSrc={LogoImage}\r\n          title=\"Agency\"\r\n          logoStyle={logoStyle}\r\n        />\r\n        <Drawer\r\n          width=\"420px\"\r\n          placement=\"right\"\r\n          drawerHandler={<HamburgMenu />}\r\n          open={state.isOpen}\r\n          toggleHandler={toggleHandler}\r\n        >\r\n          <ScrollSpyMenu\r\n            menuItems={data.menuItems}\r\n            drawerClose={true}\r\n            offset={-100}\r\n          />\r\n        </Drawer>\r\n      </Container>\r\n    </NavbarWrapper>\r\n  );\r\n};\r\n\r\n// Navbar style props\r\nNavbar.propTypes = {\r\n  navbarStyle: PropTypes.object,\r\n  logoStyle: PropTypes.object,\r\n};\r\n\r\nNavbar.defaultProps = {\r\n  // Default navbar style\r\n  navbarStyle: {\r\n    minHeight: '70px',\r\n  },\r\n  // Default logo size\r\n  logoStyle: {\r\n    width: '128px',\r\n    height: 'auto',\r\n  },\r\n};\r\n\r\nexport default Navbar;\r\n"]},"metadata":{},"sourceType":"module"}